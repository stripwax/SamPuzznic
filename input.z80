; todo: redefinable keys
; todo: include joystick

get_input:
                ; joystick left, right, up, down, fire
                ; keyboard left arrow, right arrow, up arrow, down arrow, space
                call get_input_raw
                ; if key is pressed, set corresponding key flag
                ; if key is not pressed, clear corresponding key flag
                ;up=row_9_bit_1
                ;down=row_9_bit_2
                ;left=row_9_bit_3
                ;right=row_9_bit_4
                ;fire(space)=row_8_bit_0
                ; REMEMBER: if key is down then bit reads ZERO.  if key is not down then bit reads ONE
                xor a
                ld hl, keyb_buffer+7
                bit 0,(hl)
                jr nz, @+next
                inc a; set key flag for FIRE
    @next:
                ld (controller_flags_fire), a
                xor a
                ld hl, keyb_buffer+8
                ; CHECK UP
                bit 1, (hl) ; UP key was pressed
                jr nz, @+next
                or controller_flags_dirs_up ; set key flag for UP
    @next:
                ; CHECK DOWN
                bit 2, (hl) ; DOWN key was pressed
                jr nz, @+next
                or controller_flags_dirs_down ; set key flag for DOWN
    @next:
                ; CHECK LEFT
                bit 3, (hl) ; LEFT key was pressed
                jr nz, @+next
                or controller_flags_dirs_left ; set key flag for LEFT
    @next:
                ; CHECK RIGHT
                bit 4,(hl) ; RIGHT key was pressed
                jr nz, @+next
                or controller_flags_dirs_right ; set key flag for RIGHT
    @next:
                ld (controller_flags_dirs), a
                ret

