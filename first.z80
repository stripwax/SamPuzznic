INCLUDE "DEBUG_DEFS.z80"
INCLUDE "consts.z80"
INCLUDE "SAM_IO_defs.z80"

dump 1,0    ; Dump objectcode to Page 1 with no offset, ie 32768 in BASIC's terminology
autoexec    ; Set to automatically load and call when sent to SimCoup√©
org 32768   ; Org to same address.  No clever paging needed here.

init:
				di
    @set_low_page:
				ld a,8+32						; Set low pages as screen buffer, with ROM paged out
				out (LMPR),a                     ; LMPR - pages A and B of address space
                ld a, 8+96                      ; Set video output to same pages as above, with mode 4
				out (VMPR),a                     ; VMPR - mapped to video output - same as above
    @set_palette:
                ld hl, palette_bottom+15
                ld bc, 16*256+248
                otdr
    @enable_video:
                ld a, %00000033 ; black border, screen enabled
                out (BORDER),a
	@set_stack:
				ld sp,stack						; Use our own stack, point to below bottom of stack
    @go:
				jp main
    
    @stack_space:
                defs 64

stack:
        ; point past stack space


game_loop:
                ; actions to carry out per-frame:
                ; read controller input
                ; modify cursor if necessary, based on input (e.g. letting go of FIRE)
                ; move tile, if necessary, based on input (e.g. FIRE+LEFT or FIRE+RIGHT) and note dirty region
                ; update tile status if it is now on slider (or due to be on slider)
                ; update tile status if it is in freefall including decrement fall position/counter and note dirty region
                ; (and work out if any new tiles should be in freefall and update them too)
                ; process sliders and tiles on sliders and note dirty region
                ; determine matches for stationary tiles (including tiles on sliders)
                ; update render frames for existing match destruction animation
                ; update render frames for existing bonus animation
                ; check if match destruction animation/timer has completed and update remaining blocks count (and set flag)
                ;     and check if remaining blocks == zero and set flag for winning
                ; update clock time
                ; determine if clock time < 30 seconds (and set flag to change colour and play new tune)
                ; determine if clock time <= 0 seconds (and set flag for game over / retry loop)
                ; sort dirty regions that need redrawing (tiles / background) by y coordinates
                ; ** wait for frame (e.g. wait for bottom border via HPEN)
                ; draw clock
                ; erase dirty regions
                ; draw tiles and slider   (which will clear dirty flag)
                ; draw overlays (cursor, bonus, etc)
                ; play music
                ; play sound effects
                ; 

game_loop:
                IF DEBUG==1
                    IF DEBUG_KEYMATRIX==1
                        call print_debug_keymatrix
                    ENDIF
                ENDIF

                call get_input
                call update_cursor_position
                call move_tile
                call slider_tile_detect
                call fall_tile_detect
                call slider_update
                call check_match
                call update_clock
                call check_clock_30
                call check_clock_game_over
                call sort_by_y
                call wait_frame
                call draw_clock
                call redraw_dirty
                call render_destruct ; this will call decrement on remaining blocks upon completion
                call draw_sliders
                call draw_overlays
                call render_bonus
                call music_tick
                call sfx_tick
                jr game_loop

; These are anticipatory, maybe we don't need them (or maybe we cannot disentangle
; them from their current implementation; and maybe we don't need to)
move_tile:
                ; 
                ret

fall_tile_detect:
                ret

; We might need this for performance, so that we render tiles from top-to-bottom,
; staying ahead of the raster at all times. (or staying behind the raster - whichever
; works out better, and we'll probably know once we have ticking clock graphics and
; music/sfx routines in place).
; but also it might be fine, and the cost of sorting
; might always outweight the benefit, so we might not need this.
sort_by_y:
                ret


draw_overlays:
                ; stuff like the bonus score that floats over the tiles
                ; also the cursor
                ; should probably make some of this macro and inline into game loop 
                call draw_falling_tiles
                call draw_cursor
                call render_bonus
                ret

main:
                ; clock_tick_frame counts from 49 to 0 (inclusive).
                ; but 0 means "time to redraw the clock"                
                ; wait loop for setting breakpoints in simice
                IF DEBUG==1
                    IF DEBUG_WAIT_ON_START==1
                    call debug_wait_for_a_bit
                    ENDIF
                ENDIF

                xor a
                ld (clock_tick_frame), a

                call clear_dirty_tiles_list
                call clear_falling_tiles

                call debug_memcpy_level_data
                call init_game_state
                call render_puzzle_tiles
                call count_remaining_tiles
                call render_remaining_tiles
                jp game_loop


INCLUDE "match.z80"
INCLUDE "input.z80"
INCLUDE "input_raw.z80"
INCLUDE "draw.z80"
INCLUDE "game_state.z80"
INCLUDE "clock.z80"
INCLUDE "vsync_utils.z80"
INCLUDE "cursor.z80"
INCLUDE "music.z80"
INCLUDE "sfx.z80"
INCLUDE "dirty_tiles.z80"
INCLUDE "falling.z80"
INCLUDE "slider.z80"
INCLUDE "bonus.z80"
INCLUDE "puzzle_init.z80"
INCLUDE "puzzles.z80"
INCLUDE "bitmaps.z80"
INCLUDE "palette.z80"

IF DEBUG==1
INCLUDE "debug.z80"
ENDIF

