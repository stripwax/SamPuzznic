; score is up to 9999990 (according to Puzznic arcade game)
; represent as bcd, with one trailing 0 digits

score_bcd_1: defb 0
score_bcd_2: defb 0
score_bcd_3: defb 0

init_score:
        ; start of game but not between levels!
        xor a
        ld (score_bcd_1), a
        ld (score_bcd_2), a
        ld (score_bcd_3), a
        ld (score_changed), a ; poke a nop - score has changed so re-render on next opportunity
        ret

add_score:
        xor a ; poke a nop - score has changed so re-render on next opportunity
        ld (score_changed), a
        ; add a bcd amount in bc to the score
        ld a, (score_bcd_3)
        add a, c
        daa
        ld (score_bcd_3), a
        ld a, (score_bcd_2)
        adc b
        daa
        ld (score_bcd_2), a
        ret nc
        ld a, (score_bcd_1)
        adc 0
        daa
        ld (score_bcd_1), a
        ret

render_score:
score_changed: equ $ ; poke  NOP or RET here
               nop

        ld a, 201 ; next time round this will be a RET!
        ld (score_changed), a

        ; skip leading zeros until we find a non-zero
        ; and then don't skip anything
        ld c, 0x11 ; WHITE
        ld de, SCORE_Y_OFFSET*128+SCORE_X_OFFSET/2
        ld a, (score_bcd_1)
        and a
        jr z, @+skip_bcd1
        and 240
        jr z, @+skip_bcd1_hi
        rrca
        rrca
        rrca
        rrca
        call digit_a_xy_de
    @skip_bcd1_hi:
        ld de, SCORE_Y_OFFSET*128+SCORE_X_OFFSET/2 + 4
        ld a, (score_bcd_1)
        and 15
        call digit_a_xy_de
    @skip_bcd1_do_bcd2:
        ld de, SCORE_Y_OFFSET*128+SCORE_X_OFFSET/2 + 8
        ld a, (score_bcd_2)
        and 240
        rrca
        rrca
        rrca
        rrca
        call digit_a_xy_de
    @skip_bcd2_hi:
        ld de, SCORE_Y_OFFSET*128+SCORE_X_OFFSET/2 + 12
        ld a, (score_bcd_2)
        and 15
        call digit_a_xy_de
    @skip_bcd2_do_bcd3:
        ld de, SCORE_Y_OFFSET*128+SCORE_X_OFFSET/2 + 16
        ld a, (score_bcd_3)
        and 240
        rrca
        rrca
        rrca
        rrca
        call digit_a_xy_de
    @skip_bcd3_hi:
        ld de, SCORE_Y_OFFSET*128+SCORE_X_OFFSET/2 + 20
        ld a, (score_bcd_3)
        and 15
        call digit_a_xy_de
    @final_zero:
        ; always render a final '0' character
        ; TODO, this never changes, so maybe only render
        ; it when first drawing the screen
        ld de, SCORE_Y_OFFSET*128+SCORE_X_OFFSET/2 + 24
        ld a, 0
        ;call digit_a_xy_de ; optimize, JP instead of call+ret?
        ;ret
        jp digit_a_xy_de

    @skip_bcd1:
        ; we skipped two leading zeros, we might need to skip more.
        ld a, (score_bcd_2)
        and a
        jr z, @+skip_bcd2
        and 240
        jr z, @-skip_bcd2_hi
        jp @-skip_bcd1_do_bcd2
    @skip_bcd2:
        ; we skipped four leading zeros, we might need to skip more.
        ld a, (score_bcd_3)
        and a
        jr z, @-final_zero
        and 240
        jr z, @-skip_bcd3_hi
        jp @-skip_bcd2_do_bcd3
