; The bonus logic seems to be the following:
; S (default score): 100 for a 2-match or 200 for a 2-match
; I (initial bonus): 400 or 1000 but this is INSTEAD OF the default score
;                    (i.e. if you get two 2-matches, you get 400, not 400 + 100 + 100 )
; T (trigger bonus): 600 -> 1000 -> 2000 -> 2000 -> 2000 -> ....
;
; Initial bonus:
; The initial bonus is what you get as the direct result of moving
; a tile into a matching position (including waiting for tiles to fall
; as a direct result of the tile move you just did).
; 
; A regular 2-match or 3-match has no bonus
; Two simultaneous 2-matches (i.e. 4 tiles) has 400 bonus
; A 2-match and a 3-match (i.e. 5 tiles) simultanously has 1000 bonus.
; Q: Two simultanous 3-matches (i.e. 6 tiles), or more, has what kind of bonus?
; A: ?
;
; Trigger bonus:
; After a match has been created, and tiles disappear causing tiles to fall
; into a new place creating a new match, the trigger bonus is generated.
; If the new match is a 2-match, you get the current value of T (and T moves up by one)
; i.e. you get 600 bonus (and if another is subsequently triggered from that, you get 1000
; bonus etc))
; If the new match is 3-match, or simultaneously 2 different matches, the
; value of T moves up by one and you get that value of T (and T moves up by one)
; 
; If a match triggers a second subsequent match, or a third, etc,
; the subsequent matches trigger 600, 100, 2000 .  (regardless of whether
; the first match is 2 simulatenous matches or just a single match)
;
; Q:  what happens if a single 2-match triggers a 3-match which in turn triggers a 2-match?
;     will that generate a 1000 bonus for the 3-match, and a 2000-bonus for the triggered 2-match
;     (i.e. the tier is sticky?) or a 1000 bouns for the 3-match and a 1000-bonus for the triggered
;     2-match (i.e. the extra bonus for the 3-match being 3 (instead of 2) isn't a tier but a one-off)
; A: ?
;
; Q:  What happens if you create a simultaneous 2-match AND 3-match?
;     Which in turn triggers another 2-match?
; A:  Watch https://www.youtube.com/watch?v=Wpy5U2_O55E  at 11:15
;     The the double match (the 2- and the 3-) generates a 1000 bonus,
;     and the final triggered 2-match generates a 600 bonus!
;
; matches generated by a slider, or by a tile falling off a slider
; at protruding wall edges, etc etc all appear to score the same as
; matches created by controller pushing a tile in the regular way
; 
; Examples:
; 1. a single 2-match triggers a second 2-match: 600 bonus on the second match
; 2. a single 2-match triggers a second 3-match: 1000 bonus on the second match
; 3. a single 3-match triggers a second 3-match: 1000 bonus on the second match (same as case 2)
; 4. you push a tile (and another tile falls) and two 2-matches are achieved simultanously
;    (i.e. a double 2-match): 400 bonus
; 5. a single 2-match triggers a subequent 3-match which in turn triggers a double 2-match
;    which in turn triggers yet more single and double 2-matches:
;    1000 bonus (for the triggered 3-match) followed by 2000 bonus for all the subsequent triggered matches
;    https://www.youtube.com/watch?v=Wpy5U2_O55E  at 8:48

init_bonus:
                    xor a
                    ld (bonus_tier), a
                    ret
ds ALIGN 256
bonus_scores: defw &0000, &0000, &0060, &0100, &0200

calculate_bonus_de:
                    ; on entry:
                    ; d = number of simultaneous matches
                    ; e = number of tiles matches simultaneously
                    ; if tier = 0, then bonus = 400 or 1000 according to e
                    ;              and tier goes to 1
                    ; if tier >= 1, we add d to tier,
                    ;               and we also add 1 if e > 2
                    ;               and bonus = value at that tier
                    ; (tier is capped at 4)
                    ; As a piece of sanity, set the "bonus is displayed"
                    ; flag to FALSE on entry (it gets enabled LATER, several
                    ; frames after we did the calculation))
                    xor a
                    ld (bonus_icon_frame), a
                    ld (bonus_score), a
                    ld (bonus_score+1), a
                    ld a, (bonus_tier)
                    and a
                    jr z, @initial_bonus
        @triggered_bonus:
                    add d ; a = tier + number of simultaneous matches (at least 1)
                    ld b, a ; backup
                    ld a, e
                    cp 3
                    ld a, b ; doesn't affect flags
                    jr c, @+_2_tiles_matched
        @_3_or_more_tiles_matched:
                    inc a
        @_2_tiles_matched:
                    cp 5
                    jr c, @+tier_less_than_5
                    ld a, 4
        @tier_less_than_5:
                    ld (bonus_tier), a
                    ld (bonus_icon), a
                    ld h, bonus_scores/256
                    add a, a ; multiply by 2 since bonus_scores table contains dwords
                    ld l, a
                    ld c, (hl)
                    inc hl
                    ld b, (hl)
                    ld (bonus_score), bc
                    ; WE ACTUALLY ADD THE SCORE ONLY LATER

                    ; where should the bonus actually showup on-screen..?? which tile, specifically?
                    ; I'm just going to take it from the first match tile in my list. not arcade-accurate
                    ; but it will do for not and we can always change it later
                    ld hl, match_list
            @find_match:
                    ld a, (hl)
                    cp 254 ; skip 254 (and we shouldn't find any 255 here because WE KNOW there is a valid match in here)
                    jr c, @match_found
                    inc hl
                    jp -@find_match
                    ; a = the tile type, which we can ignore. find the first xy
            @match_found:
                    inc hl
                    ld a, (hl)
                    ld (bonus_icon_xy), a
                    ret

        @initial_bonus:
                    ; 2 tiles match: score 100 (not regarded as a bonus)
                    ; 3 tiles match: score 200 (not regarded as a bonus)
                    ; 4 tiles match: score 400 (which shows up as BONUS!)
                    ; 5 tiles match: score 1000 (which shows as BONUS!)
                    ; next tier is 1, it seems (from gameplay), regardless
                    ; of how many matches in initial bonus
                    ld a, 1
                    ld (bonus_tier), a
                    ld a, e
                    cp 3
                    jr c, @+_2_tiles_matched
                    cp 4
                    jr c, @+_3_tiles_matched
                    cp 5
                    jr c, @+_4_tiles_matched
        @_5_or_more_tiles_matched:
                    ld bc, &0100
                    ld (bonus_score), bc
                    ; WE ACTUALLY ADD THE SCORE ONLY LATER
                    ld a, 3
                    ld (bonus_icon), a ; bonus icon[3] is 1000
                    ld a, &55
                    ld (bonus_icon_xy), a ; where does the bonus actually showup on-screen..?? which tile, specifically?
                    ret
        @_4_tiles_matched:
                    ld bc, &0040
                    ld (bonus_score), bc
                    ; WE ACTUALLY ADD THE SCORE ONLY LATER
                    ld a, 1
                    ld (bonus_icon), a ; bonus icon[1] is 400
                    ld a, &55
                    ld (bonus_icon_xy), a ; where does the bonus actually showup on-screen..?? which tile, specifically?
                    ret
        @_2_tiles_matched:
                    ; no bonus  ;-)  but still score
                    ld bc, &0010
                    ld (bonus_score), bc
                    ; WE ACTUALLY ADD THE SCORE ONLY LATER
                    ret
        @_3_tiles_matched:
                    ; no bonus  ;-)  but still score
                    ld bc, &0020
                    ld (bonus_score), bc
                    ; WE ACTUALLY ADD THE SCORE ONLY LATER
                    ret
                 
render_bonus:
                    ; show the 'bonus' overlay, if we're supposed to
                    ld a, (bonus_icon_frame)
                    and a
                    ret z ; no bonus so do nothing
                    ;
                    inc a
                    cp 24
                    jr nz, @+still_going
                    xor a
                    ld (bonus_icon_frame), a
                    ret
        @still_going:
                    ld (bonus_icon_frame), a
                    ; the bonus icon placement goes up by one pixel row every two frames
                    ; TODO implement that. for now, I fake it (two pixel rows every four frames)
                    srl a
                    srl a
                    ld d, a
                    ld a, (bonus_icon_xy)
                    and 240 ; y
                    rra ; a = y*128
                    sub d ; subtract the "rising y" offset
                    ld d, a

                    ld a, (bonus_icon_xy)
                    and 15
                    rla
                    rla
                    rla
                    add GRID_X_OFFSET
                    ld e, a

                    ld a, (bonus_icon)
                    ; each bonus tile is 32x16 pixels * 2 (due to mask) = 16x16*2 bytes = 512
                    dec a ; bonus_icon (0) means nothing
                    add a, a
                    add bonus_icon_bitmaps/256
                    ld h,a
                    ld l,0

                    call draw_masked_32_16_hl_de
                    ; also: these locations are going to be dirty next frame
                    ; TODO optimise. we definitely should not need to redraw the whole tile
                    ; and we're also drawing (bits of) these already anyway due to the destruction
                    ; animation. so, probably want to avoid marking matched tiles as dirty?
                    ld a, (bonus_icon_xy)
                    call push_dirty_tile
                    inc a ; since bonus icon is 2 tiles wide
                    call push_dirty_tile
                    sub 16 ; since bonus icon moves upwards overwriting the tiles vertically above this one
                    call push_dirty_tile
                    dec a ; since bonus icon is 2 tiles wide
                    call push_dirty_tile
                    ret

defs ALIGN 512
bonus_icon_bitmaps:
MDAT "bonus.b"