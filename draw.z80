    box_at_hl:
                ; draw top (left to right)
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                ; draw right side (downwards)
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                ; draw left side (upwards)
                ld b, a
                ld a, l
                sub 7
                ld l, a
                ld a, b
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ; draw odd left side (downwards)
                set 7, l
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ; draw bottom
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                ; draw right side (upwards)
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                ret

; need a vertical slice, horizontal slice, and full 16x16 rect fill
; vertical slice is for horizontal sliders;
; horizontal slice is for vertical sliders and falling blocks;
; full 16x16 rect fill is for shoving a block left or right, and for cursor itself.
; can optimize later
fillrect_16x16_black_at_de:
                ; get a black (double) pixel
                xor a
                jr _draw_debug_tile_at_de_colorbyte_a

draw_debug_tile_at_de_tile_a:
                ; on entry, de = screen buffer topleft corner of tile destination
                ; a = which tile to draw (0 = blank space, 1 = wall, 2 = triangle etc etc)
                ; multiply a by 17 to get a conveniently-coloured two-nibble (two pixel) value in a

                ; I think we get here due to corruption, currently
                if DEBUG
                bit 7, e
                jr z, @ok
                @fatal:
                nop
                jr @-fatal
                @ok:
                endif

                ld b,a
                sla a
                sla a
                sla a
                sla a
                add b
                ; left to right and right to left even rows
    _draw_debug_tile_at_de_colorbyte_a:
                ld b, 4
    @evens:
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc d
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                inc d
                djnz @-evens
                dec d
                set 7, e ; move down one row of pixels
                ld b, 4
    @odds:
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                dec d
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec d
                djnz @-odds
                ret

draw_tile_at_de_tile_a:
                ; on entry, de = screen buffer topleft corner of tile destination
                ; a = which tile to draw (0 = blank space, 1 = wall, 2 = triangle etc etc)
                ; w.r.t tile_bitmaps

                ; I think we get here due to corruption, currently
                if DEBUG
                bit 7, e
                jr z, @ok
                @fatal:
                nop
                jr @-fatal
                @ok:
                endif


                ; multiply a by 128 to get offset into bitmap data
                ld l, 0
                sra a ; shift lowest bit of a into c
                rr l ; shift c into l
                add a, tiles_bitmaps/256
                ld h,a
                ;ld hl, tiles_bitmaps
                ; left to right and right to left even rows
                ld b, 4
    @evens:
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc d
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                inc d
                inc hl
                djnz @-evens
                dec d
                set 7, e ; move down one row of pixels
                ld b, 4
    @odds:
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                inc e
                inc hl
                ld a, (hl)
                ld (de), a
                dec d
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec e
                inc hl
                ld a, (hl)
                ld (de), a
                dec d
                inc hl
                djnz @-odds
                ret

fillrect_16x2_black_at_de:
                ; get a black (double) pixel
                xor a
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                ld a, e
                add 128
                ld e, a
                ld a, d
                adc 0
                ld d, a
                xor a
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                ret

fillrect_2x16_black_at_de:
                ; get a black (double) pixel
                xor a
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a
                ld a, e
                add 128
                ld e, a
                ld a, d
                adc 0
                ld d, a
                xor a
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                ret

