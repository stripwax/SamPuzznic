IF DEBUG_DIRTY_FLASH
    DIRTY_FLASHER_INIT: EQU %10101010
    temp_dirty_flasher: defb DIRTY_FLASHER_INIT  ; bit pattern for flashing (bits are rotated)
    FLASH: equ 255  ; what to flash with

    dirty_flasher:
                ; using a counter, flipflop the actual data with something else
                ; to visually indicate which areas are being redrawn
                push hl
                ld hl, temp_dirty_flasher
                bit 0, (hl)
                jr z, @+no_flash
                ld a, FLASH
        @no_flash:
                pop hl
                ret

    update_dirty_flasher:
                ld hl, temp_dirty_flasher
                rrc (hl)
                ret

    reset_dirty_flasher:
                ld hl, temp_dirty_flasher
                ld (hl), DIRTY_FLASHER_INIT
                ret
ENDIF


box_at_hl:
                ; modifies bc, hl
                ; draw just a square outline box (used for the cursor)
                ; using color nibble passed in A register
                ; on entry, hl = screen location for drawing the box
                IF DEBUG_DIRTY_FLASH
                call dirty_flasher
                ENDIF

                ; draw top (left to right)
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                ; draw right side (downwards)
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                ; draw left side (upwards)
                ld b, a
                ld a, l
                sub 7
                ld l, a
                ld a, b
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ; draw odd left side (downwards)
                ld a, l
                add 128
                ld l, a
                ld a, h
                adc 0
                ld h, a

                ld a, b
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ld (hl), a
                inc h
                ; draw bottom
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                inc l
                ld (hl), a
                ; draw right side (upwards)
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                dec h
                ld (hl), a
                ret

; TODO
; need a vertical slice, horizontal slice, and full 16x16 rect fill
; vertical slice is for horizontal sliders;
; horizontal slice is for vertical sliders and falling blocks;
; full 16x16 rect fill is for shoving a block left or right, and for cursor itself.
; can optimize later
fillrect_16x16_black_at_de:
                ; get a black (double) pixel
                xor a
                ;IF DEBUG_DIRTY_FLASH
                ;call dirty_flasher
                ;ENDIF

                jp fillrect_16x16_de_colorbyte_a


_draw_debug_tile_at_de_tile_a:
                ; modifies bc, de
                ; draw a fake tile, for debug purposes
                ; (just solid fill 16x16)
                ; on entry, de = screen buffer topleft corner of tile destination
                ; a = which tile to draw (0 = blank space, 1 = wall, 2 = triangle etc etc)
                ; multiply A by 17 to get a conveniently-coloured two-nibble (two pixel) value in A

                ld b,a
                sla a
                sla a
                sla a
                sla a
                add b

                ; fall through to:

fillrect_16x16_de_colorbyte_a:
                ; modifies bc, de
                ; draw a solid 16x16 using color byte A (two nibbles)
                ; step 1. left to right and right to left even rows
                ; moving down the screen (even rows only)
                ld b, 4
                ld c, a ; backup
    @evens:
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc d
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                inc d
                djnz @-evens
                dec d

                ld a, e
                add 128
                ld e, a
                ld a, d
                adc 0
                ld d, a

                ; step 2. left to right and right to left odd rows
                ; moving up the screen (odd rows only)
                ld a, c ; restore
                ld b, 4
    @odds:
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                dec d
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec d
                djnz @-odds
                ret


draw_tile_at_de_tile_a:
                ; modifies de, hl, bc
                ; on entry, de = screen buffer topleft corner of tile destination
                ; a = which tile to draw (0 = blank space, 1 = wall, 2 = triangle etc etc)
                ; w.r.t tile_bitmaps

                ; multiply a by 128 to get offset into bitmap data
                ld l, 0
                sra a ; shift lowest bit of a into c
                rr l ; shift c into l
                add a, tiles_bitmaps/256
                ld h,a
                ;ld hl, tiles_bitmaps
                ; fall through to:

draw_bitmap_16x16_hl_at_de:
                ; modifies de, hl, bc
                ; draws an unmasked full 16x16 bitmap onto screen
                ; bitmap is already in 'optimized' format (butterfly sequence)
                ; on entry, de = screen buffer topleft corner of tile destination
                ; hl = bitmap data (could be anything; probably a tile)

                ; step 1. draw left to right and right to left even rows
                ; moving down the screen (even rows only)

                IF DEBUG_DIRTY_FLASH
                ; using a counter, flipflop the actual data with something else
                ; to visually indicate which areas are being redrawn
                push hl
                ld hl, temp_dirty_flasher
                bit 0, (hl)
                pop hl
                jr z, @+_normal
                ld hl, tiles_bitmaps ; blank tile
            @_normal:
                ENDIF


                ld b, 4
                ld c, 255 ; just a dummy, to avoid LDI from decrementing B!
    @evens:
                ; comparison of techniques here:
                ; manual sequence ( ld a, (hl) / ld (de), a / dec e / inc l ) = 7+7+4+4 = 22
                ; manual sequence * 8 = 8 * 22 = 176
                ; LDI * 7 + manual * 1 = 16 * 7 + 22 = 134
                ; LDI * 8 + push/pop + DEC D = 16 * 8 + 11 + 10 + 4 = 153 ; so that's definitely not better, it's worse
                ;
                ; consider two rows (both even; or both odd) . can either go left-to-right, right-to-left
                ; in which case left-to-right is all LDI, right-to-left is all manual (and can just
                ; inc d between those two things))
                ; LDI * 7 + manual * 1 + manual * 8 = 176 + 134 = 310
                ;
                ; or can use LDI (left-to-right direction) for both rows, and just subtract 7 from E
                ; LDI * 7 + manual * 1 + adjust E + LDI * 7 + manual * 1 + adjust E = 134 + 4+7+4 + 134 + 4+7+4 = 298
                ;
                ; Looks like that second approach is (slightly) better
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                ld a, (hl)
                ld (de), a
                inc d
                inc l
                ld a, e
                sub 7
                ld e, a
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                ld a, (hl)
                ld (de), a
                inc d
                inc l
                ld a, e
                sub 7
                ld e, a
                djnz @-evens
                dec d

                ; move down one row of pixels
                ld a, e
                add 128
                ld e, a
                ld a, d
                adc 0
                ld d, a

                ; step 2. draw left to right and right to left odd rows
                ; moving up the screen (odd rows only)
                ld b, 4
    @odds:
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                ld a, (hl)
                ld (de), a
                dec d
                inc l
                ld a, e
                sub 7
                ld e, a
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                ld a, (hl)
                ld (de), a
                dec d
                inc l
                ld a, e
                sub 7
                ld e, a
                djnz @-odds
                ret


draw_tile_at_de_tile_a_hshift:
                ; modifies de, hl, bc
                ; on entry, de = screen buffer topleft corner of tile destination
                ; multiply A by 144 to get offset into bitmap data
                ; since shifted bitmaps are 18*16 not 16*16
                ; 144 = 128 + 16
                ; do the 128 first (that's easy), then the 16.  A<16 so A*16 still fits in A.
                ld b, a ; temp
                ld l, 0
                sra a ; shift lowest bit of A into carry
                rr l ; shift carry into l - permissible since L=0 !!
                ld h, a ; HL is now A * 128 (so, next get A *= 16)
                ld a, b
                add a, a
                add a, a
                add a, a
                add a, a ; A *= 16
                add a, l ; might generate carry, so add carry to h below
                ld l, a
                ld a, h
                adc 0
                ld h, a
                ; now HL is A * 144
                ld bc, tiles_bitmaps_hshift
                add hl, bc

                ; fall through to:

draw_bitmap_18x16_hl_at_de:
                ; modifies de, hl, bc
                ; draws a masked (left and right nibble only) 18x16 bitmap onto screen
                ; bitmap is already in 'optimized' format (butterfly sequence)
                ; on entry, de = screen buffer topleft corner of tile destination
                ; hl = bitmap data (could be anything; probably a tile)

                IF DEBUG_DIRTY_FLASH
                ; using a counter, flipflop the actual data with something else
                ; to visually indicate which areas are being redrawn
                push hl
                ld hl, temp_dirty_flasher
                bit 0, (hl)
                pop hl
                jr z, @+_normal
                ld hl, tiles_bitmaps_hshift ; blank tile
            @_normal:
                ENDIF


                ld b, 4
                ld c, 255 ; just a dummy, to avoid LDI from decrementing B!
    @evens:
                ; first column, custom mask
                ld a, (de)
                and 0xf0
                or (hl)
                ld (de), a
                inc e
                inc hl

                ; 14 pixels via LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI

                ; last column, custom mask
                ld a, (de)
                and 0x0f
                or (hl)
                ld (de), a

                inc d
                inc hl
                ld a, e
                sub 8
                ld e, a

                ; first column, custom mask
                ld a, (de)
                and 0xf0
                or (hl)
                ld (de), a
                inc e
                inc hl

                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI

                ; last column, custom mask
                ld a, (de)
                and 0x0f
                or (hl)
                ld (de), a
                inc hl

                inc d
                ld a, e
                sub 8
                ld e, a
                djnz @-evens
                dec d

                ; move down one row of pixels
                ld a, e
                add 128
                ld e, a
                ld a, d
                adc 0
                ld d, a

                ld b, 4
    @odds:
                ld a, (de)
                and 0xf0
                or (hl)
                ld (de), a
                inc e
                inc hl

                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI

                ld a, (de)
                and 0x0f
                or (hl)
                ld (de), a
                inc hl

                dec d
                ld a, e
                sub 8
                ld e, a

                ld a, (de)
                and 0xf0
                or (hl)
                ld (de), a
                inc e
                inc hl

                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI

                ld a, (de)
                and 0x0f
                or (hl)
                ld (de), a
                inc hl

                dec d
                ld a, e
                sub 8
                ld e, a
                djnz @-odds
                ret

fillrect_16x2_black_at_de:
                ; get a black (double) pixel
                xor a
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a

                ld a, e
                add 128
                ld e, a
                ld a, d
                adc 0
                ld d, a

                xor a
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                ret

fillrect_16x1_black_at_de:
                ; get a black (double) pixel
                xor a
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                ret

fillrect_2x16_black_at_de:
                ; get a black (double) pixel
                xor a
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a
                inc d
                ld (de), a

                ld a, e
                add 128
                ld e, a
                ld a, d
                adc 0
                ld d, a

                xor a
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                dec d
                ld (de), a
                ret


draw_masked_bitmap_32x16_hl_at_de:
                ; modifies hl, de, bc
                ; hl points to 32x16 bitmap with mask (first byte is mask, second byte is pixel data)
                ; de points to screen
                @pairs_down: equ FOR 4
                    @row_l_to_r: equ FOR 15
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    inc e
                    NEXT @row_l_to_r
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    inc d
                    @row_r_to_l: equ FOR 15
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    dec e
                    NEXT @row_r_to_l
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    inc d
                NEXT @pairs_down
                    dec d
                    ld a, e
                    add 128
                    ld e, a
                    ld a, d
                    adc 0
                    ld d, a
                @pairs_up: equ FOR 4
                    @row_l_to_r: equ FOR 15
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    inc e
                    NEXT @row_l_to_r
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    dec d
                    @row_r_to_l: equ FOR 15
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    dec e
                    NEXT @row_r_to_l
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    dec d
                NEXT @pairs_up
                ret

draw_masked_bitmap_16x16_hl_at_de:
                ; modifies hl, de, bc
                ; hl points to 16x16 bitmap with mask (first byte is mask, second byte is pixel data)
                ; de points to screen
                @pairs_down: equ FOR 4
                    @row_l_to_r: equ FOR 7
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    inc e
                    NEXT @row_l_to_r
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    inc d
                    @row_r_to_l: equ FOR 7
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    dec e
                    NEXT @row_r_to_l
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    inc d
                NEXT @pairs_down
                    dec d
                    ld a, e
                    add 128
                    ld e, a
                    ld a, d
                    adc 0
                    ld d, a
                @pairs_up: equ FOR 4
                    @row_l_to_r: equ FOR 7
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    inc e
                    NEXT @row_l_to_r
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    dec d
                    @row_r_to_l: equ FOR 7
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    dec e
                    NEXT @row_r_to_l
                    ld a, (de)
                    and (hl)
                    inc hl
                    or (hl)
                    inc hl
                    ld (de), a
                    dec d
                NEXT @pairs_up
                ret

fillrect_16x8_black_at_de:
                ; get a black (double) pixel
                xor a
fillrect_16x8_de_colorbyte_a:
                ld c, a
                ld b, 2
    @evens:
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc d
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                inc d
                djnz @-evens
                dec d

                ld a, e ; move down one row of pixels
                add 128
                ld e, a
                ld a, d
                adc 0
                ld d, a

                ld a, c
                ld b, 2
    @odds:
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                dec d
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec d
                djnz @-odds
                ret

fillrect_8x8_black_at_de:
                ; get a black (double) pixel
                xor a
fillrect_8x8_de_colorbyte_a:
                push af
                ld b, 2
    @evens:
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc d
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                inc d
                djnz @-evens
                dec d

                ld a, e ; move down one row of pixels
                add 128
                ld e, a
                ld a, d
                adc 0
                ld d, a

                pop af
                ld b, 2
    @odds:
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                inc e
                ld (de), a
                dec d
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec e
                ld (de), a
                dec d
                djnz @-odds
                ret

grid_xy_in_C_to_screen_de:
                ; modifies a, de
                ; Converts grid xy coords to screen memory in DE
                ; (pointing to top-left of that xy cell)
                ; multiply both grid x and grid y by 8 (and add GRID_X_OFFSET in x direction)
                ; and put into DE
                ; on entry: c = the YYYYxxxx grid coords
                ; Uses the assumption that grid is made up of 16x16 cells.

                ld a, c
grid_xy_in_C_and_A_to_screen_de:
                ; get x coord. we want to multiply x by 8 bytes (= 16 pixels)
                ; 16 pixels wide = multiply by 8
                and 15 ; a = xxxx
                add a, a ; a = x * 2
                add a, a; a = x * 4
                add a, a ; a = x * 8
                add GRID_X_OFFSET
                ld e, a ; e = x*8+GRID_X_OFFSET

                ; now get Y coord
                ; 16 pixels high = multiply by 8
                ; (since 256 bytes = 2 rows)
                ; A contains YYYYxxxx so to multiply Y by 8 we actually divide A by 2
                ld a, c ; YYYYxxxx
                and 240 ; a = YYYY0000 (i.e. 16*y , and we want 8*y). AND clears carry
                rra ; a = y * 8   really just srl a but rra is cheaper when carry is already clear
                ld d, a

                ; de is now pointing to top left xy on screen memory
                ret

clear_screen:
                ld de, 0
                ld c, 12
            @loop2:
                ld b, 16
            @loop1:
                push de
                push bc
                ld hl, tiles_bitmaps+(128*3)
                call draw_bitmap_16x16_hl_at_de
                pop bc
                pop de
                ld a, e
                add 8
                ld e, a
                djnz @-loop1
            
                ld e, 0
                ld a, d
                add 8
                ld d, a
                dec c
                jr nz, @-loop2

                ret
