 ; Current state of a puzzle
; We maintain a 12x12 grid of tile_info (each is a few bytes)
; Actually there are multiple tables, each aligned to 256 boundaries
;     tiles
;     {
;         icon:5,  ; 5 bits=13 values, plus blank, plus wall, plus navigable-wall . Game only has 8 tiles
;     }
;     tiles_flags:
;     {
;         offset (x or y) ; 4 bits
;         falling:1, ; 1 bit
;         on_slider:1, ; 1 bit
;         blowing_up:1 ; 1 bit
;         unused: 1
;    }
;
; We also maintain a list of "how many tiles of each kind are remaining"
;
; We also maintain a list of 'dirty tiles to redraw'
; (can improve later to include just horizontal/vertical slices)
; (need to improve later to handler sliders)
;   {
;        x: 8,
;        y: 8,
;   }
;
;
; For slider, we maintain the following:
;    {
;        x:4,
;        y:4,
;        enabled:1 ; 0 if level has no slider, 1 if level has slider
;        dir:1 ; 0 = updown, 1=leftright
;        curr_dir:1 ; 0 = up (or left), 1 = down (or right)
;        subtile_pos: 3 ; 3 bits, sub_tile position in y (if updown) or x (if leftright)
;        unused :2
;    }
;
; We keep track of any 'bonus' numbers to float
;   {
;       frame: 8 ; 
;       bonus_amount: 7;
;       show_bonus: 1 ; yes/no
;   }
; 
; We have "render flags" to remind us what to redraw:
;   {
;       redraw_remaining: 1,
;       redraw_clock: 1,
;       unused: 6,
;   }
;
; We track the controller flags:
;   {
;       x: 4,  ; could optimise
;       y: 4,  ; could optimise
;       tile_ptr: 16, ; pointer to the cell in *tiles
;       up_pressed: 1,
;       up_actioned: 1,
;       down_pressed: 1,
;       down_actioned: 1,
;       left_pressed: 1,
;       left_actioned: 1,
;       right_pressed: 1,
;       right_actioned: 1,
;       fire_held: 1,
;   }

IS_FALLING_BIT: equ 4
IS_FALLING_MASK: equ 16
IS_SLIDER_BIT: equ 5 ; for the slider itself, and any block stacked on the slider
IS_SLIDER_MASK: equ 32 ; for the slider itself, and any block stacked on the slider

; following are memcpy'd from definition of a given puzzle
DS ALIGN 256
tiles_flags: defs 16*12
DS ALIGN 256
puzzle_copy_start:
tiles: defs 16*12
slider_info: defb 0
slider_xy: defb 0
slider_wait_init: defb 0 ; how many ticks to wait at the start of the level (always > 0)
slider_wait_1: defb 0 ; how many ticks to wait at the 'low' end of travel
slider_wait_2: defb 0 ; how many ticks to wait at the 'high' end of travel
clock_min_bcd: defb 0
clock_sec_bcd: defb 0
controller_flags_xy_pos: defb 0 ; starting position
puzzle_copy_end:
puzzle_copy_len: equ puzzle_copy_end - puzzle_copy_start

; following are initialized to zero at start of game loop
; from game_state_zero_start to game_state_zero_end
game_state_zero_start:
clock_tick_frame: defb 0
bonus_tier: defb 0
bonus_icon: defb 0
bonus_icon_xy: defb 0
bonus_icon_frame: defb 0 ; 0 means 'bonus icon is not shown', otherwise which frame of animation is to be displayed
bonus_score: defw 0 ; we calculate the bonus at the time of match, but then add it later, so we need to store it somewhere

controller_flags:
controller_flags_tile_ptr: defw 0
controller_flags_dirs: defb 0
controller_flags_fire: defb 0
controller_flags_flashing_ctr: defb 0 ; counts number of frames for flashing cursor
controller_flags_tile_captured: defb 0
controller_flags_disabled: defb 0

render_flags: defb 0
destruct_frame: defb 0
game_state_zero_end:

; array of remaining tiles
; element 0: how many of tile A is remaining
; element 1: how many of tile B is remaining, etc
; following is calculated just prior to start of game loop
; align 8 so that we can look at the bottom 3 bits of
; address to determine which tile this is
defs ALIGN 8
remaining_tiles: defs 8
remaining_tiles_last_time: defs 8

;constants:
controller_flags_dirs_up: equ 1
controller_flags_dirs_down: equ 2
controller_flags_dirs_left: equ 4
controller_flags_dirs_right: equ 8
controller_flags_dirs_up_bit: equ 0
controller_flags_dirs_down_bit: equ 1
controller_flags_dirs_left_bit: equ 2
controller_flags_dirs_right_bit: equ 3
