draw_clock:
                ; minutes
                ld a, (clock_min_bcd)
                ; top minute decimal
                ; can we skip it? any puzzles with a time limit > 9:59 ?
                and 240
                rrca
                rrca
                rrca
                rrca
                ld de, CLOCK_Y_OFFSET*128 ; y*128+(x/2)
                call digit_a_xy_de
                ; bottom minute decimal
                ld a, (clock_min_bcd)
                and 15
                ld de, CLOCK_Y_OFFSET*128 + 4
                call digit_a_xy_de

                ; seconds
                ld a, (clock_sec_bcd)
                ; top second decimal
                and 240
                rrca
                rrca
                rrca
                rrca
                ld de, CLOCK_Y_OFFSET*128 + 12 ; y*128+(x/2)
                call digit_a_xy_de
                ; bottom second decimal
                ld a, (clock_sec_bcd)
                and 15
                ld de, CLOCK_Y_OFFSET*128 + 16 ; y*128+(x/2)
                call digit_a_xy_de ; TODO optimize maybe JP rather than call+ret?
                ret

update_clock:
                ld a, (clock_tick_frame)
                and a ; set Z if a is zero
                ; 0 is the 'first' tick, but we need to handle specially
                ; so that we can set it to the FPS counter
                jr z, @just_tick
                ; if we are > 0 then we decrement
                dec a
                ld (clock_tick_frame), a
                ; .. and if we are NOW zero then a full second has elapsed
                ; (and if we are not at zero, then we're between second ticks
                ; and we've done all the updates we need to do)
                ret nz
    @next_sec:
                ; decrement number of remaining seconds
                ld a, (clock_sec_bcd)
                dec a
                daa
                ; did we underflow (0 -> 99) ?
                jr c, @+next_min
                ; no? ok, just save back the number of seconds
                ld (clock_sec_bcd), a
                ret
    @next_min:
                ld a, (clock_min_bcd)
                and a; set Z if a is zero
                ret z ; clock is done, we're on last minute and seconds just decremented to 0
                dec a
                daa
                ld (clock_min_bcd), a
                ld a, %01011001 ; 59 bcd
                ld (clock_sec_bcd), a
                ret
    @just_tick:
                ld a, FPS-1
                ld (clock_tick_frame), a
                ret

check_clock_30:
                ret

check_clock_game_over:
                ret

