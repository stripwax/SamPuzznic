render_puzzle_tiles:
                ld a, REMAINING_REDRAW_ALL_FORCE
                ld (redraw_remaining_tiles_flags), a
                ; memset remaining tiles to zero (we count
                ; them shortly))
                ld bc, 0
                ld (remaining_tiles), bc                
                ld (remaining_tiles+2), bc
                ld (remaining_tiles+4), bc
                ld (remaining_tiles+6), bc
                ld (remaining_tiles_last_time), bc                
                ld (remaining_tiles_last_time+2), bc
                ld (remaining_tiles_last_time+4), bc
                ld (remaining_tiles_last_time+6), bc
                xor a
                ld (tiles_drawn_last_time), a

                ; now draw the play area (AND count the 'remaining
                ; tiles' at the same time)
                ld hl, tiles ; where the tile data is
                ld bc, 10*256+12 ; count 12 rows and 10 columns
                ld de, GRID_X_OFFSET ; this is 12*0+0+32 i.e. x=0 and y=0
    @next_col:
                ld a, (hl)
                ; increment count of tiles..
                cp NUM_NON_TILES
                jr c, @+done_update_count
                push hl
                ld hl, remaining_tiles
                sub NUM_NON_TILES+1
                add l
                ld l, a
                inc (hl)
                pop hl
                ld a, (hl)
        @done_update_count:

                push bc ; TODO OPTIMIZE THIS AWAY
                push hl
                call draw_tile_at_de_tile_a
                pop hl
                res 7, e ; because, draw_tile_at_de_tile_a ends with DE one pixel row below above start pixel
                inc d
                pop bc ; TODO OPTIMIZE THIS AWAY
                ld a, e
                add 8 ; 16 pixels to the right
                ld e, a
                inc hl
                djnz @-next_col
                ; now, skip the next 6 bytes of hl for the next row
                inc hl
                inc hl
                inc hl
                inc hl
                inc hl
                inc hl
                ld b, 10 ; reset column counters for next row
                ld e, GRID_X_OFFSET ; column zero
                ld a, d ; next row on screen (128*16 pixels = 256*8 bytes)
                add 8   ; ...
                ld d, a ; ...
                dec c
                jr nz, @-next_col
                jp render_remaining_tiles
                ret


debug_memcpy_level_data:
                ld a, DEBUG_LEVEL_NUMBER
                jp memcpy_level_data

memcpy_level_data:
                ; on entry, a = which level
                add a, a ; pointers are two bytes, so need offset*2 into the index
                ld hl, PUZZLEDATA_INDEX
                add a, l
                ld l, a
                jr nc, @ok
                inc h ; carry
        @ok:
                ; To save space, the levels are (slightly) compressed
                ; Our grid in game state is 16x12 but our level data is just 10x12
                ; so just copy 10 bytes, 12 times
                ; TODO more compression but only if necessary
                ld a, (hl)
                inc hl
                ld h, (hl)
                ld l, a
                ld de, tiles
                ld a, 12 ; count number of rows
            @next:
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                inc de
                inc de
                inc de
                inc de
                inc de
                inc de
                dec a
                jp nz, @-next
                ; finally copy the remaining pieces
                ld bc, puzzle_copy_len - 16*12
                ldir
                ret


init_game_state:
                ; call after doing memcpy_level_data
                ; basically a memclear but also a few other things
                ld hl, game_state_zero_start
                xor a
                ld (hl), a
                ld de, game_state_zero_start + 1
                ld bc, game_state_zero_end - game_state_zero_start - 1
                LDIR

                ; memclr tiles_flags
                ld hl, tiles_flags
                xor a
                ld (hl), a
                ld de, tiles_flags+1
                ld bc, 16*12-1
                LDIR

                call init_cursor_controller

                ret


render_screen_layout:
                ld de, PLAYER_Y_OFFSET*128
                ld hl, strings.PLAYER
                call print_text_hl_de
                ld de, TIME_LABEL_Y_OFFSET*128
                ld hl, strings.TIME
                call print_text_hl_de
                ld de, CLOCK_Y_OFFSET*128
                ld hl, strings.CLOCK
                call print_text_hl_de
                ret

strings.PLAYER: defm "PLAYER-1"
defb 0

strings.TIME: defm "TIME"
defb 0

; render  0'00"
strings.CLOCK: defb 32,48,39,48,48,34,0
