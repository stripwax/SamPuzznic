update_slider_vertical:
                ld b, a ; backup slider_info
                ; get x/y of slider and point to tiles grid
                ld a, (slider_xy)
                ld l, a
                ld h, tiles/256

                ; which direction are we going?
                ; (=0: y is decreasing, =1: y is increasing) 
                bit SLIDER_DIRECTION_BIT, b
                jp nz, @y_increasing
            @y_decreasing:
            y_decreasing:
                ; is slider currently in-motion between grid points?
                ; if so, just keep doing that
                ld a, (slider_motion_frame)
                and a
                jr z, @+finished_moving_between_cells

                dec a
                ld (slider_motion_frame), a
                dec h ; point to flags
                ; update the y-coordinate in the tile flags
                ; (this is also the same value as the slider_motion_frame
                ; but with the 'I am sliding' flag set too)
                ; We update the slider block and the blocks in the stack
                or IS_SLIDER_MASK
                ld c, a ; backup

                ; say that the slider did move this frame (and in which direction)
                ld a, SLIDER_MOVED_YES_VALUE + SLIDER_MOVED_UP_VALUE
                ld (slider_moved_this_frame), a

                ld a, (slider_stack_height)
                inc a ; including slider itself
                ld b, a
                ld a, l
            @more_on_stack:
                ld (hl), c
                sub 16
                ld l, a
                djnz @-more_on_stack

                ret

            @finished_moving_between_cells:
                ; can the slider move one more place in this direction?
                ; check N rows up (up = decreasing y value)
                ; where N is the size of the stack on the slider
                ld a, (hl)
                ld b, a ; b = the slider's tile icon
                ld a, (slider_stack_height)
                inc a ; we need to look one row BEYOND the stack height
                rla
                rla
                rla
                rla 
                ld c, a ; c = (slider stack height+1) * 16

                ld a, l
                sub c ; this many rows up
                ld l, a

                ld a, (hl)
                and a
                jr nz, @+blocked

                ; also check one row ABOVE this one,
                ; in case THAT row has a falling tile with
                ; yoffset > 0
                ld a, l
                sub 16
                ld l, a
                dec h ; point to flags
                ld a, (hl)
                and IS_FALLING_MASK
                jr z, @+check_blocked_no_falling_tile_found
                ld a, (hl)
                and 15
                jr nz, @+blocked
            @check_blocked_no_falling_tile_found:
                inc h ; back to tiles
                ld a, l
                add 16
                ld l, a ; back to how it was
                ; TODO wouldn't push/pop be quicker here?

                ; keep going.
                ; say that the slider did move this frame (and in which direction)
                ld a, SLIDER_MOVED_YES_VALUE + SLIDER_MOVED_UP_VALUE
                ld (slider_moved_this_frame), a

                ; (move the cursor too, if it is captured)
                ; (it feels like this logic is in totally the wrong place)
                ; ===========
                push hl
                ld a, (controller_flags_tile_captured)
                and a
                jr z, @+done_checking_slider_captured
                ld a, (controller_flags_xy_pos)
                ld l, a
                ld h, tiles_flags/256
                bit IS_SLIDER_BIT, (hl)
                jr z, @+done_checking_slider_captured
            @slider_is_captured:
                ; move the cursor to the new spot
                sub 16 ; subtract 1 from Y
                ld (controller_flags_xy_pos), a
                
            @done_checking_slider_captured:
                pop hl
                ; ==============

                ; we move our tile AND everything in the stack, up to the next cell
                ; (start at the end furthest from the slider)
                ld a, (slider_stack_height)
                inc a ; need to move the slider block itself too
                ld b, a
                ld a, l
                add 16 ; point to the thing moving FROM
                ld l, a
                ld d, 15 + IS_SLIDER_MASK
        @move_next_thing_in_stack:
        
                ld c, (hl)
                sub 16
                ld l, a ; point to where it is moving TO
                ld (hl), c
                ; and set the y coordinate and the 'I am slider' flag
                dec h ; point to flags
                ld (hl), d
                inc h ; point back to tiles

                add 32 ; point to the NEXT THING moving from
                ld l, a
                djnz @-move_next_thing_in_stack

                ; zero the place where the bottom piece (the slider) was before
                sub 16
                ld l, a
                xor a
                ld (hl), a
                dec h ; point back to flags
                ld (hl), a ; a still zero                

                ; slider's xy has officially changed
                ld a, (slider_xy)
                sub 16
                ld (slider_xy), a

                ; and start counting another 15 frames after this one
                ld a, 15
                ld (slider_motion_frame), a
                
                ret

        @blocked:
                ; y decreasing, change direction
                ld a, (slider_wait_1)
                ld (slider_wait_frame), a
                ld a, (slider_info)
                or SLIDER_DIRECTION_MASK ; flip direction
                ld (slider_info), a
                xor a ; the next motion frame is zero (to then trigger the "move between cells" case)
                ld (slider_motion_frame), a
                ret

        @y_increasing:
        y_increasing:

                ; is slider currently in-motion between grid points?
                ; if so, just keep doing that
                ld a, (slider_motion_frame)
                and a
                jr z, @+finished_moving_between_cells
                dec a
                ld (slider_motion_frame), a

                ; update the y-coordinate in the tile flags
                ; (this is 16-the slider_motion_frame
                ; but with the 'I am sliding' flag set too)
                ; We update the slider block and the blocks in the stack
                ; When going down, there is an additional special case:
                ; on frame 16, we're now grid aligned ONE ROW BELOW
                jr z, @frame_16_going_down
        @going_down_one_pixel_row:
                neg
                add 16 ; a = (-frame)+16 = 16-frame
                or IS_SLIDER_MASK
                ld c, a ; backup

                ; say that the slider did move this frame (and in which direction)
                ld a, SLIDER_MOVED_YES_VALUE + SLIDER_MOVED_DOWN_VALUE
                ld (slider_moved_this_frame), a

                ld a, (slider_stack_height)
                inc a ; including slider itself
                ld b, a
                ld a, l
                dec h ; point to flags
            @more_on_stack:
                ld (hl), c
                sub 16
                ld l, a
                djnz @-more_on_stack

                ret
            @frame_16_going_down:
                ; say that the slider did move this frame (and in which direction)
                ld a, SLIDER_MOVED_YES_VALUE + SLIDER_MOVED_DOWN_VALUE
                ld (slider_moved_this_frame), a

                ; (move the cursor too, if it is captured)
                ; (it feels like this logic is in totally the wrong place)
                ; ===========
                push hl
                ld a, (controller_flags_tile_captured)
                and a
                jr z, @+done_checking_slider_captured
                ld a, (controller_flags_xy_pos)
                ld l, a
                ld h, tiles_flags/256
                bit IS_SLIDER_BIT, (hl)
                jr z, @+done_checking_slider_captured
            @slider_is_captured:
                ; move the cursor to the new spot
                add 16 ; add 1 to Y
                ld (controller_flags_xy_pos), a
                
            @done_checking_slider_captured:
                pop hl
                ; ==============

                ; we move our slider tile down AND everything in the stack
                ; (start at the slider itself and work thru the stack)
                ld a, (slider_stack_height)
                inc a ; need to move the slider block itself too
                ld b, a
                ; hl points to the slider itself (in tiles) already
                ; however, we manipulate l register thru this loop, so get into accumulator
                ld a, l
                ld d, 0 + IS_SLIDER_MASK
        @move_next_thing_in_stack:
                ld c, (hl)
                add 16
                ld l, a ; point to where it is moving TO
                ld (hl), c
                ; and set the y coordinate and the 'I am slider' flag
                dec h ; point to flags
                ld (hl), d
                inc h ; point back to tiles

                sub 32 ; point to the NEXT THING moving from
                ld l, a
                djnz @-move_next_thing_in_stack

                ; zero the grid entry that used to be where the top of the stack was
                add 16
                ld l, a
                xor a
                ld (hl), a
                dec h ; point back to flags
                ld (hl), a ; a still zero                

                ; slider's xy has officially changed
                ld a, (slider_xy)
                add 16
                ld (slider_xy), a

                ret

            @finished_moving_between_cells:
                ; can the slider move one more place in this direction?
                ; check 1 row down (down = increasing y value)
                ld a, l
                ld b, a ; backup
                add 16 ; one row down
                ld l, a
                ld a, (hl)
                and a
                jr nz, @+blocked

                ; not blocked, put hl back where it was
                ld l, b

                ; and start counting another 15 frames after this one
                ld a, 15
                ld (slider_motion_frame), a
                
                ; and jump back to the part where we move everything down by one pixel
                jp @-going_down_one_pixel_row

        @blocked:
                ; y increasing, change direction
                ld a, (slider_wait_2)
                ld (slider_wait_frame), a
                ld a, (slider_info)
                and 255-SLIDER_DIRECTION_MASK ; flip direction
                ld (slider_info), a
                xor a ; the next motion frame is zero (to then trigger the "move between cells" case)
                ld (slider_motion_frame), a
                ret



draw_slider_vertical:
                ; FIRST, blank out a 1-pixel-high row at the top or bottom of the stack,
                ; according to where the stack was last frame. (and according to the stack
                ; height last frame))
                ; if slider went up, we need to blank a 1-pixel-high row at the bottom below the slider
                ; if slider went down, we need to blank a 1-pixel-high row at the top (of the stack)
                ; If slider didn't move this frame, we should not blank anything
                ; I encode these facts into two bits in slider_moved_this_frame
                ld a, (slider_moved_this_frame)
                bit SLIDER_MOVED_YESNO_BIT, a
                jr z, @neither_up_nor_down
                and SLIDER_MOVED_UPDOWN_MASK
                jr z, @going_up
        @going_down:
                ; if we went down, the pixel row to blank is the top of the slider stack (from last frame)
                ld de, (screen_y_top_of_slider_stack)
                call fillrect_16x1_black_at_de
                jp @+done_blank

        @going_up:
                ; if we went up, the pixel row to blank is the bottom of the slider tile (from last frame)
                ; which is 15 pixel rows (=7*256 + 128)
                ld de, (screen_y_top_of_slider_tile)
                ld a, e
                add 128
                ld e, a
                ld a, d
                adc 7
                ld d, a
                call fillrect_16x1_black_at_de

        @done_blank:
        @neither_up_nor_down:

                ; ok now draw the slider tile and the stack of tiles on top of it.

                ld a, (slider_xy)

                ; copy and pasted from dirty_tiles (with some small changes):

                ; draw this tile
                ; a = YYYYxxxx
                ; for screen: multiply both x and y by 8 (and add GRID_X_OFFSET in x direction)
                ;             and put into de
                ; for tiles: a is (conveniently) already the low byte offset into table
                ;             so we can just put a into c (since bc is aligned to 256-bytes)
                ld c, a ; used for bc address AND ALSO used as a backup of a that we need later                
                ld b, tiles_flags / 256
                ld a, (bc)
                and 15 ; y-offset (in this case it's y... for horiz slider it would be x though...)
                
                ; now, get h= (y_offset/2) and l = 128*(y_offset % 2)
                ; put the lsb of y into l IN THE TOP BIT
                ; and the rest of the bits (i.e. y/2) into h
                ld l, 0
                rra
                ld h, a
                rr l

                call grid_xy_in_C_to_screen_de
                ld a, l
                add e
                ld e, a
                ld a, d
                add h
                ld d, a

                inc b ; point to tiles
                ld a, (bc) ; the actual tile to draw

                ld (screen_y_top_of_slider_tile), de

                push de
                push bc
                call draw_tile_at_de_tile_a
                pop bc
                pop de

                ; if gameplay is paused (due to destruct) then do nothing else
                ; FIXME this feels wrong, but is necessary here because the destruct
                ; overlay renderer should now be taking ownership of the slider and stack
                ; (in the case where something in the stack is part of the match/destruct)
                ; but we still need to draw the slider in THIS position (otherwise slider
                ; will be one-frame-behind where the destructing tiles are))
                ld a, (destruct_frame)
                and a
                ret nz


                ; loop for the rest of the tiles on the stack
                ld a, (slider_stack_height)
                and a
                jr z, @done_drawing_stack
                ld (slidr_temp), a
        @more_on_the_stack:
                ; navigate up one tile row in tiles, and 16 pixel rows on-screen
                ld a, c
                sub 16
                ld c, a
                ld a, d
                sub 8
                ld d, a
                ld a, (bc)

                push de
                push bc
                call draw_tile_at_de_tile_a
                pop bc
                pop de

                ld hl, slidr_temp
                dec (hl)
                jr nz, @more_on_the_stack

        @done_drawing_stack:
                ld (screen_y_top_of_slider_stack), de
                ret
