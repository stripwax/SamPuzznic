; (based on the import order)
; we would have already assembled first/main/everything into pages 1 and 2
; so we're probably around the top of page 2 now
; ORG was 0x8000 so around the top of page 2 we're close to 0xFFFF
; check that we haven't accidentally wrapped to around 0x0000!
ASSERT $ > 32768
ASSERT $ <= 65535

; DS ALIGN 16384 will get us to the start of page 3
; 
DS ALIGN 16384
; page 3 - puzzle data
INCLUDE "puzzles.z80"
DEFB 0

DS ALIGN 16384
; page 4 - not yet used.
; optional tile sets? (i.e. instead of default tile sets?)
DEFB 0

DS ALIGN 16384
; page 5 - not yet used.
; level select mechanism, menu system, high score table?
DEFB 0

DS ALIGN 16384
; page 6 - not yet used.
DEFB 0

DS ALIGN 16384
; page 7 - not yet used.
DEFB 0

DS ALIGN 16384
; page 8
; the video ram is paged here (page8+9)
; handy to put data (and small code) here that we're likely to use
; many times for different parts of the runtime e.g. fonts
; (we're making use of the 'spare' area after the frame buffer)
ORG 0
DEFS 24576

DS ALIGN 256
glint_bitmaps:
MDAT "glint.b"

; TODO think about memory map. only one brick bitmap is used for each level,
; so it's a bit weird to put all the bricks for all levels in the same page
; as frame buffer
DS ALIGN 256
bricks_bitmaps:
MDAT "bricks.b"

ds ALIGN 256
fatnums:
MDAT "fatnums.b"