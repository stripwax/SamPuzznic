tiles_drawn_last_time: defb 0
tiles_drawn_this_time: defb 0

; redraw_remaining_tiles_flags needs a bit of explanation
; if bit 0 is set: tiles are reordered since last time
;                  (this happens entirely within the render_remaining_tiles loop)
; if bit 1 is set: force redraw all tiles (including the 'x' which
;                  we would ordinarily skip after drawing it when level begins)
;                  (i.e. this flag is only set on the initial play field draw)
; if bit 2 is set: external game logic wants to trigger a redraw
;                  of the remaining tiles
redraw_remaining_tiles_flags: defb 0
REMAINING_REORDERED: equ 1
REMAINING_REDRAW_ALL_FORCE: equ 2
REMAINING_REDRAW_TRIGGER: equ 4

@draw_the_x:
                ld hl, remaining_x+1
                ld a, (ix+0)
                add 48
                ld (hl), a
                dec hl
                ld a, e
                add REMAINING_TILES_TEXT_X_OFFSET/2
                ld e, a
                ld c, 0x11 ; WHITE
                call print_text_hl_de
                jp @done_drawing_this_tile

render_remaining_tiles:
                ; this draws the bitmaps AND the counts.
                ; but only draws what it needs to (compared to what it
                ; drew last time, and whether anything changed)
                ld a, (redraw_remaining_tiles_flags)
                and REMAINING_REDRAW_ALL_FORCE + REMAINING_REDRAW_TRIGGER ; need to draw?
                ret z

                ; start off assuming tiles are not reordered
                ; (the above AND will have cleared the REMAINING_REORDERED flag)
                ; (the 'force' flag might be set though)
                ld (redraw_remaining_tiles_flags), a

                ; We also need to count how many tiles we draw (starting from zero)
                xor a
                ld (tiles_drawn_this_time), a

                ; get setup to draw the first (top left) tile
                ld ix, remaining_tiles
                ld de, REMAINING_TILES_Y_OFFSET*128+(REMAINING_TILES_X_OFFSET_LEFT/2)
                ld b, 8
                ld c, 4 ; how many remaining in this column (we show two columns of four)
        @next_tile:
                ; Work out what to draw and when to draw it
                ; First, assume the 'reordered' flag is clear
                ; 
                ; If the reordered flag is still clear, and the count for this tile
                ;    is the same as last time, do nothing for this tile
                ; If the reordered flag is still clear, and the count for this tile is
                ;    different, but still > 0, then draw just the count
                ; If the count is zero (and wasn't last time, as already covered),
                ;    then set the reordered flag to remind us that the
                ;    order has now changed (but since the count is zero, don't need to
                ;    draw this actual tile)
                ; If the reordered flag is set, draw the bitmap (and count) for this tile

                ; 1. Is the reordered flag set (or the force flag)?  if so, need to redraw everything
                ;    (except zero tiles)
                ld a, (redraw_remaining_tiles_flags)
                and REMAINING_REORDERED + REMAINING_REDRAW_ALL_FORCE
                jr nz, @+reordered
                ; 2. Not reordered. Is the count the same as last time?
                ld a, (ix+0) ; a = count of the "L"'th tile
                cp (ix+8) ; compare with count of the "L"'th tile last time
                jr z, @+same_as_last_time
                ; 3. ok, not the same as last time.  Is it zero this time?
                and a
                jr nz, @+not_zero_must_just_be_different
                ld a, (redraw_remaining_tiles_flags) ; it was zero. set the reordered flag, skip this tile
                or REMAINING_REORDERED
                ld (redraw_remaining_tiles_flags), a
                jp @+skip_zero
        @not_zero_must_just_be_different:
                ; 3. just draw the number
                push bc
                push de
                ld a, d
                add REMAINING_TILES_TEXT_Y_OFFSET/2
                ld d, a
                ld a, e
                add REMAINING_TILES_TEXT_X_OFFSET/2 + 4 ; + 4 to skip the x and move to the digit
                ld e, a
                ld a, (ix+0)
                ld c, 0x11 ; WHITE                
                call digit_a_xy_de
                jp @+done_drawing_this_tile

        @same_as_last_time:
                ; either was a zero this time (and last time)
                ; or was the same tile with the same remaining quantity this time and last time
                ; Figure out which and continue the loop, missing out the redrawing
                ; in the latter case since that's the whole point of this logic :-)
                and a
                jr z, @+skip_zero
                jp @+totally_optimized_out_drawing_this_tile

        @reordered:
                ; the order of this tile (or a previous one) has changed
                ; since last redraw, so unfortunately we have to draw all
                ; the bitmaps and counts
                ; We can still skip tiles with zero count thouh.
                ; 4. is the count of the "L"'th tile equal to zero
                ; (if so, don't draw it:  we only show the remaining "non-zero" tiles)
                ld a, (ix+0) ; a= count of the "L"'th tile
                and a
                jr z, @+skip_zero
                ; ok we gotta draw it. ah well, we tried to avoid this but
                ; sometimes you just gotta.
                ; find out which tile is the "L"'th tile (i.e. look at lower 3 bits of L)
                ld a, ixl
                and 7
                add NUM_NON_TILES + 1
                push bc
                push de
                push de
                call draw_tile_at_de_tile_a
                pop de
                ld a, d
                add REMAINING_TILES_TEXT_Y_OFFSET/2
                ld d, a
                ; can we skip drawing the 'x'?
                ld a, (redraw_remaining_tiles_flags)
                and REMAINING_REDRAW_ALL_FORCE
                jp nz, @draw_the_x
        @skip_drawing_the_x: ; just draw the number (because the 'x' isn't changing)
                ld a, e
                add 4 + REMAINING_TILES_TEXT_X_OFFSET/2
                ld e, a
                ld a, (ix+0)
                ld c, 0x11 ; WHITE                
                call digit_a_xy_de
        @done_drawing_this_tile:
                pop de
                pop bc
        @totally_optimized_out_drawing_this_tile:
                ; we drew a tile this time
                ; (even if we 'skipped it' in the case where the
                ; tile we should draw is unchanged since last time)
                ld hl, tiles_drawn_this_time
                inc (hl)
                ;
                dec c
                jr z, @next_column
                ld a, d
                add 8+(REMAINING_TILES_Y_SPACING/2)
                ld d, a
        @skip_zero:
                inc ix
                djnz @-next_tile
        @remaining_blanks:
                ; we've finished drawing tiles and remaining counts
                ; (for the tiles where remaining counts > 0)
                ; keep a note of how many we drew this time, and compare to how
                ; many we drew last time.
                ; if we drew fewer this time, then we need to blank out the rest
                ld hl, tiles_drawn_this_time
                ld a, (tiles_drawn_last_time)
                sub (hl)
                jr c, @+DONE ; same number of tiles last time, no need to do any blanking
                jr z, @+DONE ; FEWER number of tiles last time, no need to do any blanking
                ; ok, THIS time had fewer number of tiles
                ; we drew more tiles last time
                ; work out how many blanks to draw, and which columns
                ; if c==0 then left column complete and right column empty
                ; so blank right column
                ld a, c
                and a
                jr z, @_blank_right_column
                ; else, if c > 0 (ie. 1, 2, 3, 4) then we didn't fill the
                ; left coumn, so there's maybe SOME blanking to do
                bit 7, c
                jr z, @_blank_left_column
                ; else, blank the right column
        @_blank_right_column: ; so we need to blank the right columns
                ld a, 4
                add c
                ret z ; no remaining blanks
                ld c, a
        @_blank_next_remaining_tile_right_column:
                push bc
                push de

                push de
                ld a, 0x00 ; BLACK
                call fillrect_16x16_de_colorbyte_a
                pop de

                ld a, d
                add REMAINING_TILES_TEXT_Y_OFFSET/2
                ld d, a
                ld a, e
                add REMAINING_TILES_TEXT_X_OFFSET/2
                ld e, a
                
                ; draw 16x8
                ld a, 0x00 ; BLACK
                call fillrect_16x8_de_colorbyte_a

                pop de
                pop bc
                ld a, d
                add 8+(REMAINING_TILES_Y_SPACING/2)
                ld d, a
                dec c
                jr nz, @-_blank_next_remaining_tile_right_column
                jp @+DONE
        @_blank_left_column:
                push bc

                push de
                push de
                ld a, 0x00 ; BLACK
                call fillrect_16x16_de_colorbyte_a
                pop de

                ld a, d
                add REMAINING_TILES_TEXT_Y_OFFSET/2
                ld d, a
                ld a, e
                add REMAINING_TILES_TEXT_X_OFFSET/2
                ld e, a

                ; draw 16x8
                ld a, 0x00 ; BLACK
                call fillrect_16x8_de_colorbyte_a

                pop de
                pop bc
                ld a, d
                add 8+(REMAINING_TILES_Y_SPACING/2)
                ld d, a
                dec c
                jr nz, @-_blank_left_column
                ld c, 0
                ld de, REMAINING_TILES_Y_OFFSET*128+(REMAINING_TILES_X_OFFSET_RIGHT/2)
                jp @_blank_right_column

        @next_column:
                ; c = 0 i.e. we've drawn four tiles in this column so advance to next column
                ld de, REMAINING_TILES_Y_OFFSET*128+(REMAINING_TILES_X_OFFSET_RIGHT/2)
                ; neat trick, do NOT reset c.  c is now zero.  On next iteration, c will wrap to 255
                ; b is the real counter. c just tells us how many are left in this column
                inc ix
                dec b
                jp nz, @-next_tile
                jp @-remaining_blanks

        @DONE: 
                ; any cleanup / state change
                ; We drew all the tiles, so we don't need to do it again
                ; (unless someone sets this flag again)
                xor a
                ld (redraw_remaining_tiles_flags), a
                ; copy counts of tiles from last time to this time
                ; also record the number of tiles drawn THIS time, for NEXT time
                ld a, (tiles_drawn_this_time)
                ld (tiles_drawn_last_time), a
                ld hl, remaining_tiles
                ld de, remaining_tiles_last_time
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                LDI
                ret


remaining_x:    defm "*0"
                defb 0